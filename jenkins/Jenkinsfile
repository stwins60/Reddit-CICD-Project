pipeline {
    agent any
    tools {
        nodejs 'node21'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('d4506f04-b98c-47db-95ce-018ceac27ba6')
        SCANNER_HOME= tool 'sonar-scanner'
        IMAGE_NAME = "idrisniyi94/reddit-project" 
        IMAGE_TAG = "fwf-${env.BUILD_NUMBER}"
        BRANCH_NAME = '${GIT_BRANCH.split("/")[1]}'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                checkout scmGit(branches: [[name: '*/dev'], [name: '*/qa'], [name: '*/prod']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/stwins60/Reddit-CICD-Project.git']])
            }
        }
        stage('NPM Install') {
            steps {
                sh 'npm install'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=reddit-project -Dsonar.projectName=reddit-project'''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                sh "trivy fs . > trivy-${env.BRANCH_NAME}-reddit-project.txt"
            }
        }
        stage('OWASP FILE SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey 4bdf4acc-8eae-45c1-bfc4-844d549be812', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Docker Login') {
            steps {
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                echo "Login Succeeded"
            }
        }
        stage('Docker Build') {
            steps {
                script {
                   def branchTag = determineTargetEnvironment()
                   if (branchTag == 'prod') {
                        sh "npm run build"
                        sh "sed -i 's/CMD \\[\"npm\", \"run\", \"dev\"\\]/CMD \\[\"npm\", \"start\"\\]/' Dockerfile"
                        sh "docker build -t $IMAGE_NAME:$branchTag-$IMAGE_TAG"
                   }
                   else {
                    
                        sh "docker build -t $IMAGE_NAME:$branchTag-$IMAGE_TAG"
                   }
                }
            }
        }
        stage("Trivy Image Scan") {
            steps {
                script {
                    def branchTag = determineTargetEnvironment()
                    sh "trivy image $IMAGE_NAME:$branchTag-$IMAGE_TAG > trivy-${env.BRANCH_NAME}-reddit-project-image-result.txt"
                }
            }
        }
        stage("Docker Push") {
            steps {
                script {
                    def branchTag = determineTargetEnvironment()
                    sh "docker push $IMAGE_NAME:$branchTag-$IMAGE_TAG"
                }
            }
        }
        stage('Deployment') {
            steps {
                script {
                    dir('./K8s')
                    kubeconfig(credentialsId: '500a0599-809f-4de0-a060-0fdbb6583332', serverUrl: '') {
                        def targetEnvironment = determineTargetEnvironment()
                        def deploymentName = "${targetEnvironment}-reddit-project-deployment"
                        def deploymentFile = "${targetEnvironment}-deployment.yaml"
                        def serviceFile = "${targetEnvironment}-service.yaml"
                        def deploymentExist = sh(script: "kubectl get deployment ${deploymentName}", returnStatus: true)

                        if (deploymentExist == 0) {
                            sh "kubectl delete -f ${deploymentFile}"
                            sh "sed -i 's|image: .*|image: $IMAGE_NAME:$branchTag-$IMAGE_TAG|' $deploymentFile"
                            sh "kubectl apply -f ${deploymentFile}"
                            sh "kubectl apply -f ${serviceFile}"
                        } else {
                            echo "Deployment does not exist. Skipping deletion and re-apply."
                        }
                    }
                }
            }
        }
    }
    post {
       success {
           
            slackSend channel: '#alerts', color: 'good', message: "${currentBuild.currentResult}: \nJOB_NAME: ${env.JOB_NAME} \nBUILD_NUMBER: ${env.BUILD_NUMBER} \nBRANCH_NAME: ${env.BRANCH_NAME}. \n More Info ${env.BUILD_URL}"
        }
        failure {

            slackSend channel: '#alerts', color: 'danger', message: "${currentBuild.currentResult}: \nJOB_NAME: ${env.JOB_NAME} \nBUILD_NUMBER: ${env.BUILD_NUMBER} \nBRANCH_NAME: ${env.BRANCH_NAME}. \n More Info ${env.BUILD_URL}"
        } 
    }

}
def determineTargetEnvironment() {
    def branchName = env.BRANCH_NAME
    if (branchName == 'qa') {
        return 'qa'
    } else if (branchName == 'prod') {
        return 'prod'
    } else {
        return 'dev'
    }
}